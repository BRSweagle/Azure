{
  "serverTemplates": {
    "-CloudFront": {
      "EMEA-Deployment": {
        "Bucket": "newlogs.s3.amazon.co.UK",
        "IncludeCookies": "true",
        "Prefix": "myprefix",
        "region": "uk-dr1"
      },
      "Resources": {
        "myDistribution": {
          "Properties": {
            "DistributionConfig": {
              "Aliases": {
                "mysite.example.com": {},
                "yoursite.example.com": {}
              },
              "DefaultCacheBehavior": {
                "AllowedMethods": {
                  "DELETE": {},
                  "GET": {},
                  "HEAD": {},
                  "OPTIONS": {},
                  "PATCH": {},
                  "POST": {},
                  "PUT": {}
                },
                "ForwardedValues": {
                  "Cookies": {
                    "Forward": "none"
                  },
                  "QueryString": "false"
                },
                "TrustedSigners": {
                  "1234567890EX": {},
                  "1234567891EX": {}
                },
                "TargetOriginId": "myS3Origin",
                "ViewerProtocolPolicy": "allow-all"
              },
              "Logging": {
                "Bucket": "mylogs.s3.amazon.com",
                "IncludeCookies": "false",
                "Prefix": "myprefix"
              },
              "Origins": {
                "myS3Origin": {
                  "S3OriginConfig": {
                    "OriginAccessIdentity": "origin-access-identity/cloudfront/E127EXAMPLE51Z"
                  },
                  "DomainName": "mybucket.s3.amazon.com",
                  "Id": "myS3Origin"
                }
              },
              "Restrictions": {
                "GeoRestriction": {
                  "Locations": {
                    "AQ": {},
                    "CV": {}
                  },
                  "RestrictionType": "whitelist"
                }
              },
              "ViewerCertificate": {
                "CloudFrontDefaultCertificate": "true"
              },
              "Comment": "Some comment",
              "DefaultRootObject": "index.html",
              "Enabled": "true",
              "PriceClass": "PriceClass_200"
            }
          },
          "Type": "::CloudFront::Distribution"
        }
      },
      "US-Deployment": {
        "Bucket": "mylogs.s3.amazon.com",
        "IncludeCookies": "false",
        "Prefix": "myprefix",
        "region": "us-north-1"
      },
      "TempAWlateFormatVersion": "2010-09-09"
    },
    "-EC2-InstanceCatalogue": {
      "medium": {
        "instancetype": "t2.medium"
      },
      "micro": {
        "instancetype": "t2.micro"
      },
      "nano": {
        "instancetype": "t2.nano",
        "size": "0.25"
      },
      "Properties": {
        "AvailabilityZone": "us-east-1a",
        "ImageId": "ami-0ff8a91507f77f867"
      },
      "x-large": {
        "instancetype": "t2.x-large"
      },
      "description": "-base-image",
      "region": "EMEA",
      "type": "::EC2::Instance",
      "imageid": "ami-fsdgas",
      "volumesize": "50",
      "size": "0.5",
      "instancetype": "t2.micro"
    },
    "-ECS": {
      "Base-ECS-Deployment": {
        "AsgMaxSize": {
          "Default": "2",
          "Description": "Maximum size and initial desired capacity of Auto Scaling Group",
          "Type": "Number"
        },
        "MountPoint": {
          "Default": "myEFSvolume",
          "Description": "The Linux mount point for the EFS volume",
          "MinLength": "1",
          "Type": "String"
        },
        "VolumeName": {
          "Default": "myEFSvolume",
          "Description": "The name to be used for the EFS volume",
          "MinLength": "1",
          "Type": "String"
        }
      },
      "Parameters": {
        "AsgMaxSize": {
          "Default": "2",
          "Description": "Maximum size and initial desired capacity of Auto Scaling Group",
          "Type": "Number"
        },
        "InstanceType": {
          "ConstraintDescription": "must be a valid EC2 instance type.",
          "Default": "t2.small",
          "Description": "WebServer EC2 instance type",
          "Type": "String"
        },
        "KeyName": {
          "Description": "Name of an existing EC2 key pair to enable SSH access to the ECS instances",
          "Type": "::EC2::KeyPair::KeyName"
        },
        "MountPoint": {
          "Default": "myEFSvolume",
          "Description": "The Linux mount point for the EFS volume",
          "MinLength": "1",
          "Type": "String"
        },
        "SSHLocation": {
          "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
          "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x.",
          "Default": "0.0.0.0/0",
          "Description": "The IP address range that can be used to connect to the EC2 instances by using SSH",
          "MaxLength": "18",
          "MinLength": "9",
          "Type": "String"
        },
        "VolumeName": {
          "Default": "myEFSvolume",
          "Description": "The name to be used for the EFS volume",
          "MinLength": "1",
          "Type": "String"
        }
      },
      "TemplateFormatVersion": "2010-09-09",
      "Description": "This template creates an Amazon EFS file system and mount target and associates it with Amazon EC2 instances in an Auto Scaling group. **WARNING** This template creates Amazon EC2 instances and related resources. You will be billed for the  resources used if you create a stack from this template."
    },
    "-Lambda": {
      "Mappings": {
        "InstanceType2Arch": {
          "m1.small": {
            "Arch": "HVM64"
          },
          "t2.micro": {
            "Arch": "HVM64"
          }
        },
        "RegionArch2AMI": {
          "ap-northeast-1": {
            "HVM64": "ami-06cd52961ce9f0d85",
            "HVMG2": "ami-053cdd503598e4a9d"
          },
          "ap-southeast-1": {
            "HVM64": "ami-08569b978cc4dfa10",
            "HVMG2": "ami-0be9df32ae9f92309"
          },
          "ap-southeast-2": {
            "HVM64": "ami-09b42976632b27e9b",
            "HVMG2": "ami-0a9ce9fecc3d1daf8"
          },
          "cn-north-1": {
            "HVM64": "ami-0a4eaf6c4454eda75",
            "HVMG2": "NOT_SUPPORTED"
          },
          "eu-central-1": {
            "HVM64": "ami-0233214e13e500f77",
            "HVMG2": "ami-06223d46a6d0661c7"
          },
          "eu-west-1": {
            "HVM64": "ami-047bb4163c506cd98",
            "HVMG2": "ami-0a7c483d527806435"
          },
          "sa-east-1": {
            "HVM64": "ami-07b14488da8ea02a0",
            "HVMG2": "NOT_SUPPORTED"
          },
          "us-east-1": {
            "HVM64": "ami-0ff8a91507f77f867",
            "HVMG2": "ami-0a584ac55a7631c0c"
          },
          "us-west-1": {
            "HVM64": "ami-0bdb828fd58c52235",
            "HVMG2": "ami-066ee5fd4a9ef77f1"
          },
          "us-west-2": {
            "HVM64": "ami-a0cfeed8",
            "HVMG2": "ami-0e09505bc235aa82d"
          }
        }
      },
      "Outputs": {
        "AllSecurityGroups": {
          "Value": {
            "Fn::Join": {
              ",": {},
              "Fn::GetAtt": {
                "AllSecurityGroups": {},
                "Value": {}
              }
            }
          },
          "Description": "Security Groups that are associated with the EC2 instance"
        }
      },
      "Parameters": {
        "ExistingSecurityGroups": {
          "Type": "List<::EC2::SecurityGroup::Id>"
        },
        "ExistingVPC": {
          "Description": "The VPC ID that includes the security groups in the ExistingSecurityGroups parameter.",
          "Type": "::EC2::VPC::Id"
        },
        "InstanceType": {
          "AllowedValues": {
            "m1.small": {},
            "t2.micro": {}
          },
          "Default": "t2.micro",
          "Type": "String"
        }
      },
      "Resources": {
        "AllSecurityGroups": {
          "Properties": {
            "AppendedItem": {
              "Ref": "SecurityGroup"
            },
            "List": {
              "Ref": "ExistingSecurityGroups"
            },
            "ServiceToken": "AppendItemToListFunction.Arn"
          },
          "Type": "Custom::Split"
        },
        "AppendItemToListFunction": {
          "Properties": {
            "Code": {
              "ZipFile": "var response = require('cfn-response');\nexports.handler = function(event, context) {\n   var responseData = {Value: event.ResourceProperties.List};\n   responseData.Value.push(event.ResourceProperties.AppendedItem);\n   response.send(event, context, response.SUCCESS, responseData);\n};\n"
            },
            "Handler": "index.handler",
            "Role": "LambdaExecutionRole.Arn",
            "Runtime": "nodejs8.10"
          },
          "Type": "::Lambda::Function"
        },
        "LambdaExecutionRole": {
          "Properties": {
            "AssumeRolePolicyDocument": {
              "Statement": {
                "Action": {
                  "sts:AssumeRole": {}
                }
              },
              "Version": "2012-10-17"
            },
            "Policies": {
              "PolicyDocument": {
                "Statement": {
                  "Action": {
                    "logs:*": {}
                  }
                },
                "Version": "2012-10-17"
              }
            },
            "Path": "/"
          },
          "Type": "::IAM::Role"
        },
        "MyEC2Instance": {
          "Properties": {
            "ImageId": {
              "Fn::FindInMap": {
                "null": {
                  "Ref": "::Region"
                },
                "RegionArch2AMI": {},
                "Fn::FindInMap": {
                  "null": {
                    "Ref": "InstanceType"
                  },
                  "Arch": {},
                  "InstanceType2Arch": {}
                }
              }
            },
            "InstanceType": {
              "Ref": "InstanceType"
            },
            "SecurityGroupIds": "AllSecurityGroups.Value"
          },
          "Type": "::EC2::Instance"
        },
        "SecurityGroup": {
          "Properties": {
            "SecurityGroupEgress": {
              "null": {
                "CidrIp": "0.0.0.0/0",
                "FromPort": "80",
                "IpProtocol": "tcp",
                "ToPort": "80"
              }
            },
            "SecurityGroupIngress": {
              "null": {
                "CidrIp": "0.0.0.0/0",
                "FromPort": "80",
                "IpProtocol": "tcp",
                "ToPort": "80"
              }
            },
            "VpcId": {
              "Ref": "ExistingVPC"
            },
            "GroupDescription": "Allow HTTP traffic to the host"
          },
          "Type": "::EC2::SecurityGroup"
        }
      },
      "TemplateFormatVersion": "2010-09-09"
    },
    "-OpsWork": {
      "Parameters": {
        "AppName": {
          "AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*",
          "ConstraintDescription": "must begin with a letter and contain only alphanumeric characters.",
          "Default": "myapp",
          "Description": "The app name",
          "MaxLength": "64",
          "MinLength": "1",
          "Type": "String"
        },
        "InstanceRole": {
          "AllowedPattern": "[a-zA-Z][a-zA-Z0-9-]*",
          "ConstraintDescription": "must begin with a letter and contain only alphanumeric characters.",
          "Default": "-opsworks-ec2-role",
          "Description": "The OpsWorks instance role",
          "MaxLength": "64",
          "MinLength": "1",
          "Type": "String"
        },
        "MysqlRootPassword": {
          "Description": "MysqlRootPassword",
          "NoEcho": "true",
          "Type": "String"
        },
        "ServiceRole": {
          "AllowedPattern": "[a-zA-Z][a-zA-Z0-9-]*",
          "ConstraintDescription": "must begin with a letter and contain only alphanumeric characters.",
          "Default": "-opsworks-service-role",
          "Description": "The OpsWorks service role",
          "MaxLength": "64",
          "MinLength": "1",
          "Type": "String"
        }
      },
      "Resources": {
        "DBLayer": {
          "Properties": {
            "Attributes": {
              "MysqlRootPassword": {
                "Ref": "MysqlRootPassword"
              },
              "MysqlRootPasswordUbiquitous": "true"
            },
            "CustomRecipes": {
              "Setup": {
                "phpapp::dbsetup": {}
              }
            },
            "StackId": {
              "Ref": "myStack"
            },
            "VolumeConfigurations": {
              "null": {
                "MountPoint": "/vol/mysql",
                "NumberOfDisks": "1",
                "Size": "10"
              }
            },
            "AutoAssignElasticIps": "false",
            "AutoAssignPublicIps": "true",
            "EnableAutoHealing": "true",
            "Name": "MyMySQL",
            "Shortname": "db-layer",
            "Type": "db-master"
          },
          "DependsOn": "myApp",
          "Type": "::OpsWorks::Layer"
        },
        "ELB": {
          "Properties": {
            "AvailabilityZones": {
              "Fn::GetAZs": ""
            },
            "HealthCheck": {
              "HealthyThreshold": "2",
              "Interval": "30",
              "Target": "HTTP:80/",
              "Timeout": "5",
              "UnhealthyThreshold": "10"
            },
            "Listeners": {
              "null": {
                "InstancePort": "80",
                "InstanceProtocol": "HTTP",
                "LoadBalancerPort": "80",
                "Protocol": "HTTP"
              }
            }
          },
          "Type": "::ElasticLoadBalancing::LoadBalancer"
        },
        "ELBAttachment": {
          "Properties": {
            "ElasticLoadBalancerName": {
              "Ref": "ELB"
            },
            "LayerId": {
              "Ref": "myLayer"
            }
          },
          "Type": "::OpsWorks::ElasticLoadBalancerAttachment"
        },
        "myApp": {
          "Properties": {
            "AppSource": {
              "Revision": "version2",
              "Type": "git",
              "Url": "git://github.com/amazonwebservices/opsworks-demo-php-simple-app.git"
            },
            "Attributes": {
              "DocumentRoot": "web"
            },
            "Name": {
              "Ref": "AppName",
              "IP": "",
              "Name": ""
            },
            "StackId": {
              "Ref": "myStack"
            },
            "Type": "php"
          },
          "Type": "::OpsWorks::App"
        },
        "myAppInstance1": {
          "Properties": {
            "LayerIds": {
              "null": {
                "Ref": "myLayer"
              }
            },
            "StackId": {
              "Ref": "myStack"
            },
            "InstanceType": "m1.small"
          },
          "Type": "::OpsWorks::Instance"
        },
        "myAppInstance2": {
          "Properties": {
            "LayerIds": {
              "null": {
                "Ref": "myLayer"
              }
            },
            "StackId": {
              "Ref": "myStack"
            },
            "InstanceType": "m1.small"
          },
          "Type": "::OpsWorks::Instance"
        },
        "myDBInstance": {
          "Properties": {
            "LayerIds": {
              "null": {
                "Ref": "DBLayer"
              }
            },
            "StackId": {
              "Ref": "myStack"
            },
            "InstanceType": "m1.small"
          },
          "Type": "::OpsWorks::Instance"
        },
        "myLayer": {
          "Properties": {
            "CustomRecipes": {
              "Configure": {
                "phpapp::appsetup": {}
              }
            },
            "StackId": {
              "Ref": "myStack"
            },
            "AutoAssignElasticIps": "false",
            "AutoAssignPublicIps": "true",
            "EnableAutoHealing": "true",
            "Name": "MyPHPApp",
            "Shortname": "php-app",
            "Type": "php-app"
          },
          "DependsOn": "myApp",
          "Type": "::OpsWorks::Layer"
        },
        "myStack": {
          "Properties": {
            "CustomCookbooksSource": {
              "Type": "git",
              "Url": "git://github.com/amazonwebservices/opsworks-example-cookbooks.git"
            },
            "DefaultInstanceProfileArn": "arn::iam::${::AccountId}:instance-profile/${InstanceRole}",
            "ServiceRoleArn": "arn::iam::${::AccountId}:role/${ServiceRole}",
            "UseCustomCookbooks": "true"
          },
          "Type": "::OpsWorks::Stack"
        }
      },
      "OpsWork": "2010-09-09"
    },
    "-RDS-DB": {
      "Type": "::RDS::DBInstance",
      "Engine": "oracle-ee",
      "MasterUserPassword": "SecretPassword01",
      "AllocatedStorage": "12",
      "MasterUsername": "master",
      "DBInstanceClass": "db.m1.small",
      "DeletionPolicy": "Snapshot",
      "LicenseModel": "bring-your-own-license"
    },
    "-S3": {
      "-S3": "2010-09-09",
      "IndexDocument": "index.html",
      "Id": "MyPolicy",
      "Bucket": "S3Bucket",
      "Type": "::S3::BucketPolicy",
      "Version": "2012-10-17",
      "AccessControl": "PublicRead",
      "ErrorDocument": "error.html"
    },
    "-EC2-Instance": {
      "region": "EMEA",
      "instancetype": "t2.micr",
      "size": "0.5",
      "description": "-base-image",
      "type": "::EC2::Instance",
      "volumesize": "50",
      "imageid": "ami-fsdgas"
    }
  }
}
